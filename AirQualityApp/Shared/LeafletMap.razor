@page "/leafletmap"
@using AirQualityApp.BackgroundServices;
@using Microsoft.JSInterop
@using AirQualityApp.Services
@using System.Text.Json
@inject IJSRuntime JSRuntime
@inject OpenAqApiClient OpenAqApiClient
@inject MeasurementCacheService CacheService
@using AirQualityApp.Models

<div id="map"></div>

@code {

    private async Task InitializeMapAsync()
    {
        var map = await JSRuntime.InvokeAsync<IJSObjectReference>("initializeAirQualityMap");

        Console.WriteLine("Map Initialized");
        Console.WriteLine("Fetching measurements from DB");
        var measurements = await GetMeasurementsAsync();
        Console.WriteLine("Measurements fetched from DB");

        try
        {
            Console.WriteLine("Grouping measurements by location");
            var measurementsByLocation = OpenAqApiClient.GroupMeasurementsByLocation(measurements);
            Console.WriteLine("Received measurements by location: " + measurementsByLocation.ToString());
            await JSRuntime.InvokeVoidAsync("updateMarkers", map, measurementsByLocation);
            Console.WriteLine("Markers Added");
           



        }
        catch (Exception e)
        {
            Console.WriteLine("Error: " + e.Message);
        }
    }

    public async Task<List<Measurement>> GetMeasurementsAsync()
    {
        if (CacheService.CachedMeasurements == null)
        {
            CacheService.CachedMeasurements = await OpenAqApiClient.FetchMeasurementsFromDb();
        }

        return CacheService.CachedMeasurements;
    }

    

    

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializeMapAsync();

        }
    }
}