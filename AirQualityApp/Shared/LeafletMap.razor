@page "/leafletmap"
@using Microsoft.JSInterop
@using AirQualityApp.Services
@using System.Text.Json
@inject IJSRuntime JSRuntime
@inject OpenAqApiClient OpenAqApiClient
@inject MeasurementCacheService CacheService
@using AirQualityApp.Models

<div id="map"></div>

@code {
    private async Task InitializeMapAsync()
    {
        var map = await JSRuntime.InvokeAsync<IJSObjectReference>("initializeAirQualityMap");

        var measurements = await GetMeasurementsAsync();

        try
        {
            await OpenAqApiClient.GetCountriesAsync();
            var measurementsByLocation = OpenAqApiClient.GroupMeasurementsByLocation(measurements);
            Console.WriteLine("Received measurements by location: " + measurementsByLocation.ToString());
            await JSRuntime.InvokeVoidAsync("updateMarkers", map, measurementsByLocation);
            Console.WriteLine("Markers Added");
        }
        catch (Exception e)
        {
            Console.WriteLine("Error: " + e.Message);
        }
    }

    public async Task<List<Measurement>> GetMeasurementsAsync()
    {
        if (CacheService.CachedMeasurements == null)  
        {
            CacheService.CachedMeasurements = await FetchMeasurementsFromApi(); 
            StartAutoRefresh();
        }

        return CacheService.CachedMeasurements; 
    }

    private async Task<List<Measurement>> FetchMeasurementsFromApi()
    {
        var measurements = new List<Measurement>();
        var countries = OpenAqApiClient.GetCountriesFromDb();

        foreach (var country in countries)
        {
            var pm10 = OpenAqApiClient.GetGlobalMeasurementsFromDb("pm10", country.Code);
            var pm25 = OpenAqApiClient.GetGlobalMeasurementsFromDb("pm25", country.Code);

            measurements.AddRange(pm10);
            measurements.AddRange(pm25);
        }

        return measurements;
    }

    private void StartAutoRefresh()
    {
        Task.Run(async () =>
        {
            while (true)
            {
                await Task.Delay(TimeSpan.FromMinutes(10));
                CacheService.CachedMeasurements = await FetchMeasurementsFromApi();  
            }
        });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializeMapAsync();
        }
    }
}
